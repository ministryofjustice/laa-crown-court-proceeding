plugins {
    id "java"
    id "jacoco"
    id "org.sonarqube" version "6.2.0.5505"
    id "com.diffplug.spotless" version "8.0.0"
    id "info.solidsoft.pitest" version "1.15.0"
    id "org.springframework.boot" version "3.4.6"
    id "io.spring.dependency-management" version "1.1.6"
}

group = "uk.gov.justice.laa.crime"

jacoco {
    toolVersion = "0.8.13"
}

def versions = [
        sentry                  : "8.24.0",
        awazonSqs               : "2.1.4",
        springCloud             : "3.3.1",
        crimeCommonsClasses     : "4.7.1",
        commonsModSchemas       : "1.34.0",
        springDoc               : "2.8.6",
        awsSTS                  : "2.31.41",
        awsJavaSDK              : "1.12.783",
        testcontainers          : "1.21.0",
        resilience4j            : "2.3.0",
        wiremock                : "3.10.0",
        notifyClient            : "5.2.1-RELEASE"
]

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    testSqsIntegrationImplementation.extendsFrom testImplementation
}

sourceSets {
    testSqsIntegration {
        compileClasspath += sourceSets.main.output
        runtimeClasspath += sourceSets.main.output
    }
}

repositories {
    mavenCentral()
}

dependencies {

    implementation platform("io.sentry:sentry-bom:$versions.sentry")
    implementation "io.sentry:sentry-spring-boot-starter-jakarta"
    implementation "io.sentry:sentry-logback"
    
    implementation "uk.gov.justice.service.laa-crime:crime-commons-classes:$versions.crimeCommonsClasses"
    implementation "uk.gov.justice.service.laa-crime:crime-commons-mod-schemas:$versions.commonsModSchemas"
    
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-web"
    implementation "org.springframework.boot:spring-boot-starter-webflux"
    implementation "org.springframework.boot:spring-boot-starter-validation"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-client"
    implementation "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa"

    implementation "org.springframework:spring-jms"
    implementation "software.amazon.awssdk:sts:$versions.awsSTS"
    implementation "com.amazonaws:amazon-sqs-java-messaging-lib:$versions.awazonSqs"
    implementation "io.awspring.cloud:spring-cloud-aws-starter-sqs:$versions.springCloud"

    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:$versions.springDoc"

    implementation "io.github.resilience4j:resilience4j-reactor:$versions.resilience4j"
    implementation "io.github.resilience4j:resilience4j-spring-boot3:$versions.resilience4j"

    implementation "org.postgresql:postgresql"
    implementation "org.liquibase:liquibase-core"

    implementation "com.google.code.gson:gson"

    implementation 'io.micrometer:micrometer-tracing'
    implementation "io.micrometer:micrometer-registry-prometheus"
    implementation 'io.micrometer:micrometer-tracing-bridge-brave'

    implementation "uk.gov.service.notify:notifications-java-client:$versions.notifyClient"

    compileOnly "org.projectlombok:lombok"
    annotationProcessor "org.projectlombok:lombok"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation "com.h2database:h2"
    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation "org.wiremock.integrations:wiremock-spring-boot:$versions.wiremock"

    testCompileOnly "org.projectlombok:lombok"
    testAnnotationProcessor "org.projectlombok:lombok"
    //dependencies for ProsecutionListenerTest only
    testSqsIntegrationImplementation "com.amazonaws:aws-java-sdk:$versions.awsJavaSDK"
    testSqsIntegrationImplementation "com.amazonaws:aws-java-sdk-sqs:$versions.awsJavaSDK"
    testSqsIntegrationImplementation "org.testcontainers:localstack:$versions.testcontainers"
    testSqsIntegrationImplementation "org.testcontainers:junit-jupiter:$versions.testcontainers"
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        targetExclude '**/generated/**', '**/build/**'

        formatAnnotations()
        palantirJavaFormat()
        importOrder('', 'java', 'javax', 'org', 'com')

        endWithNewline()
        trimTrailingWhitespace()
        removeUnusedImports()
        forbidWildcardImports()

        // Custom rule: Disallow JUnit assertions
        custom("Refuse JUnit assertions", { text ->
            if (text =~ /\bassert(?:Equals|True|False|Null|NotNull|Same|NotSame|ArrayEquals)\b/) {
                throw new IllegalStateException(
                        "Use AssertJ (assertThat(...)) instead of JUnit assertions."
                )
            }
            text
        } as Closure<String>)
    }
}

test {
    useJUnitPlatform()
    dependsOn "cleanTest"
    finalizedBy jacocoTestReport
}

tasks.register('testSqsIntegration', Test) {
    useJUnitPlatform()
    classpath = sourceSets.testSqsIntegration.runtimeClasspath
    testClassesDirs = sourceSets.testSqsIntegration.output.classesDirs
}

check.dependsOn testSqsIntegration

jacocoTestReport {
    onlyIf = { true }
    reports {
        xml.required = true
        html.required = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["**/entity/**",
                              "**/dto/**",
                              "**/config/**"])
        }))
    }
}

pitest {
    targetClasses = ["uk.gov.justice.laa.crime.crowncourt.*",
                     "uk.gov.justice.laa.crime.crowncourt.controller.*",
                     "uk.gov.justice.laa.crime.crowncourt.validation.*"
    ]
    excludedClasses = ["uk.gov.justice.laa.crime.crowncourt.dto.*",
                       "uk.gov.justice.laa.crime.crowncourt.mapper.*",
                       "uk.gov.justice.laa.crime.crowncourt.CrownCourtProceedingApplication"
    ]
    threads = 5
    mutationThreshold = 60
    timestampedReports = false
    outputFormats = ["XML", "HTML"]
}

def isCiBuild = System.getenv("SONAR_TOKEN") != null

if (isCiBuild) {
    tasks.named("sonar") {
        dependsOn "test"
    }
}

sonar {
    skipProject = !isCiBuild
    properties {
        property "sonar.exclusions", "**/entity/**.java , **/model/**.java , **/dto/**.java , **/config/**.java, **/jms/**.java,**/exception/**.java,**/handler/**.java"
        property "sonar.coverage.exclusions", "**/CrownCourtProceedingApplication.java"
        property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        property "sonar.projectKey", "ministryofjustice_laa-crown-court-proceeding"
        property "sonar.organization", "ministryofjustice"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectName", "Crime Apps :: crown-court-proceeding"
        property "sonar.pitest.mode", "reuseReport"
        property "sonar.pitest.reportsDirectory", "build/reports/pitest"
    }
}

