server:
  port: 8087

logging:
  level:
    root: ${LOG_LEVEL}
    org.springframework.web: ${LOG_LEVEL}
    org.springframework.security: ${LOG_LEVEL}

management:
  server:
    port: 8096
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
  tracing:
    propagation:
      type: w3c,b3
    enabled: true

springdoc:
  packagesToScan: uk.gov.justice.laa.crime.crowncourt
  api-docs:
    path: /open-api/api-docs

  swagger-ui:
    path: /open-api/swagger-ui/index.html
    operationsSorter: method

spring:
  cloud:
    aws:
      credentials:
        use-default-aws-credentials-chain: true
      region:
        static: ${CLOUD_PLATFORM_QUEUE_REGION}

  datasource:
    url: jdbc:postgresql://${DATASOURCE_HOST_PORT}/${DATASOURCE_DBNAME}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 30
      minimum-idle: 10
      pool-name: crown-court-proceeding-hikari
      connection-timeout: 30000
      idle-timeout: 60000
      max-lifetime: 1800000
      keepalive-time: 300000

  liquibase:
    change-log: classpath:/db/changelog/db.changelog-master.yaml

  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    open-in-view: false
    generate-ddl: false
    hibernate:
      ddl-auto: validate
    properties:
      hibernate.temp.use_jdbc_metadata_defaults: false

  security:
    oauth2:
      client:
        provider:
          maat-api:
            token-uri: ${MAAT_API_OAUTH_URL}
          cda:
            token-uri: ${CDA_OAUTH_URL}
          evidence:
            token-uri: ${EVIDENCE_API_OAUTH_URL}
        registration:
          maat-api:
            client-id: ${MAAT_API_OAUTH_CLIENT_ID}
            client-secret: ${MAAT_API_OAUTH_CLIENT_SECRET}
            authorization-grant-type: client_credentials
          cda:
            clientId: ${CDA_OAUTH_CLIENT_ID}
            clientSecret: ${CDA_OAUTH_CLIENT_SECRET}
            authorizationGrantType: client_credentials
          evidence:
            client-id: ${EVIDENCE_API_OAUTH_CLIENT_ID}
            client-secret: ${EVIDENCE_API_OAUTH_CLIENT_SECRET}
            authorization-grant-type: client_credentials
            scope: evidence/standard
      resource-server:
        jwt:
          issuer-uri: ${JWT_ISSUER_URI}

sentry:
  dsn: ${SENTRY_DSN}
  environment: ${SENTRY_ENV}
  release: 0.0.1
  servername: aws-eks-container
  send-default-pii: true
  attach-stacktrace: true
  sample-rate: ${SENTRY_SAMPLE_RATE}

cloud-platform:
  aws:
    sqs:
      queue:
        hearingResulted: ${HEARING_RESULTED_QUEUE}
        prosecutionConcluded: ${PROSECUTION_CONCLUDED_QUEUE}

resilience4j:
  retry:
    configs:
      default:
        max-attempts: 3
        wait-duration: 2s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
        retry-exceptions:
          - org.springframework.web.reactive.function.client.WebClientRequestException
          - org.springframework.web.reactive.function.client.WebClientResponseException.BadGateway
          - org.springframework.web.reactive.function.client.WebClientResponseException.TooManyRequests
          - org.springframework.web.reactive.function.client.WebClientResponseException.ServiceUnavailable
          - org.springframework.web.reactive.function.client.WebClientResponseException.GatewayTimeout

    instances:
      maatCourtDataWebClient:
        base-config: default

services:
  court-data-adapter:
    base-url: ${CDA_BASE_URL}
    registrationId: cda

  maat-api:
    base-url: ${MAAT_API_BASE_URL}
    registrationId: maat-api

  evidence:
    base-url: ${EVIDENCE_API_BASE_URL}
    registrationId: evidence

emailClient:
  notify:
    key: ${NOTIFY_KEY}
    reactivated_prosecution:
      template-id: ${NOTIFY_REACTIVATED_PROSECUTION_TEMPLATE_ID}
      recipient: ${NOTIFY_REACTIVATED_PROSECUTION_RECIPIENT}
    dropped_prosecution:
      template-id: ${NOTIFY_DROPPED_PROSECUTION_TEMPLATE_ID}
      recipient: ${NOTIFY_DROPPED_PROSECUTION_RECIPIENT}

queue:
  message:
    log:
      cron:
        expression: 0 0 0 * * *
      expiryInDays: 30
    purge:
      cron:
        expression: 0 0 2 * * *
      month: 2

reports:
  reactivated_cases:
    cron:
      expression: ${REPORT_CRON_REACTIVATED_CASES} # 0 5 4 * * * every day at 4:05AM
  dropped_prosecution:
    cron:
      expression: ${REPORT_CRON_DROPPED_PROSECUTION} # 0 10 4 * * * every day at 4:10AM

feature:
  prosecution-concluded-listener:
    enabled: ${PROSECUTION_CONCLUDED_LISTENER_ENABLED}
    dbUsername: ${PROSECUTION_CONCLUDED_DATABASE_NAME}
  prosecution-concluded-schedule:
    enabled: ${PROSECUTION_CONCLUDED_SCHEDULE_ENABLED}
