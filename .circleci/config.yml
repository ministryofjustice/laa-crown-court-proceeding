version: 2.1

orbs:
  snyk: snyk/snyk@1.4.0
  aws-cli: circleci/aws-cli@4.0.0
  aws-ecr: circleci/aws-ecr@8.2.1

_snyk_options: &snyk_options
  project: "${CIRCLE_PROJECT_REPONAME}/${CIRCLE_BRANCH}"
  organization: "legal-aid-agency"
  severity-threshold: "critical"
  fail-on-issues: true
  monitor-on-build: false
  token-variable: SNYK_TOKEN
  additional-arguments: --policy-path=.snyk

# ------------------
# EXECUTORS
# ------------------
executors:
  cloud-platform-executor:
    resource_class: small
    docker:
      - image: ministryofjustice/cloud-platform-tools
    working_directory: ~/laa-crown-court-proceeding/crown-court-proceeding
  build-executor:
    docker:
      - image: cimg/openjdk:17.0.4
    working_directory: ~/laa-crown-court-proceeding/crown-court-proceeding

# ------------------
# COMMANDS
# ------------------
commands:
  deploy-to:
    description: >
      Deploy image to the specified environment
    parameters:
      environment:
        description: Destination environment
        type: string
      token:
        description: CircleCI Service account token
        type: string
    steps:
      - checkout
      - run:
          name: Decrypt secrets
          command: |
            echo "${GIT_CRYPT_KEY}" | base64 -d > git-crypt.key
            git-crypt unlock git-crypt.key
      - run:
          name: Authenticate with cluster
          command: |
            echo -n ${K8S_CLUSTER_CERT} | base64 -d > ./ca.crt
            kubectl config set-cluster ${K8S_CLUSTER_NAME} --certificate-authority=./ca.crt --server=https://${K8S_CLUSTER_NAME}
            kubectl config set-credentials circleci --token=<< parameters.token >>
            kubectl config set-context ${K8S_CLUSTER_NAME} --cluster=${K8S_CLUSTER_NAME} --user=circleci --namespace=laa-crown-court-proceeding-<< parameters.environment >>
            kubectl config use-context ${K8S_CLUSTER_NAME}
            kubectl --namespace=laa-crown-court-proceeding-<< parameters.environment >> get pods
      - run:
          name: Upgrade helm chart
          command: |
            helm upgrade laa-crown-court-proceeding ./helm_deploy/laa-crown-court-proceeding/. \
                          --install --wait \
                          --namespace=laa-crown-court-proceeding-<< parameters.environment >> \
                          --values ./helm_deploy/laa-crown-court-proceeding/values-<< parameters.environment >>.yaml \
                          --set image.tag="${CIRCLE_SHA1}"

# ------------------
# JOBS
# ------------------
jobs:
  build_and_scan:
    executor: build-executor
    steps:
      - checkout:
          path: ~/laa-crown-court-proceeding
      - restore_cache:
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - run:
          name: Build
          command: ./gradlew clean build
      - run:
          name: Run SonarQube
          command: ./gradlew sonarqube -Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.host.url=${SONARQUBE_URL} -Dsonar.organization=${SONAR_ORG}
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v1-gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v1-gradle-cache-{{ checksum "build.gradle" }}
      - persist_to_workspace:
          root: .
          paths:
            - build
      - store_test_results:
          path: build/test-results/test
      - store_artifacts:
          path: build/test-results/test
      - store_artifacts:
          path: build/reports/jacoco/test/html
      - store_artifacts:
          path: build/libs
      - snyk/scan:
          <<: *snyk_options

  build_scan_and_push_image:
    executor: build-executor
    steps:
      - checkout:
          path: ~/laa-crown-court-proceeding
      - attach_workspace:
          at: .
      - setup_remote_docker:
          docker_layer_caching: true
      - aws-cli/setup:
          role_arn: $ECR_ROLE_TO_ASSUME
          region: $ECR_REGION
      - run: |
          aws ecr get-login-password --region $ECR_REGION | docker login --username AWS --password-stdin ${AWS_ECR_REGISTRY_ID}.dkr.ecr.${ECR_REGION}.amazonaws.com
      - run:
          name: Build docker image
          command: |
            docker build \
            --build-arg COMMIT_ID=${CIRCLE_SHA1} \
            --build-arg BUILD_TAG=${CIRCLE_SHA1} \
            --build-arg APP_BRANCH=${CIRCLE_BRANCH} \
            --build-arg BUILD_DATE=$(date +%Y-%m-%dT%H:%M:%S%z) \
            -t $AWS_ECR_ACCOUNT_URL/crime-apps/laa-crown-court-proceeding-dev-ecr:${CIRCLE_SHA1} .
      - snyk/scan:
          docker-image-name: "$AWS_ECR_ACCOUNT_URL/crime-apps/laa-crown-court-proceeding-dev-ecr:${CIRCLE_SHA1}"
          <<: *snyk_options
      - run:
          name: Push to ECR
          command: |
            docker push "$AWS_ECR_ACCOUNT_URL/crime-apps/laa-crown-court-proceeding-dev-ecr:${CIRCLE_SHA1}"

  deploy-dev:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: dev
          token: ${CIRCLE_CI_TOKEN_DEV}

  deploy-test:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: test
          token: ${CIRCLE_CI_TOKEN_TEST}

  deploy-uat:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: uat
          token: ${CIRCLE_CI_TOKEN_UAT}

  deploy-staging:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: staging
          token: ${CIRCLE_CI_TOKEN_STAGING}

  deploy-prod:
    executor: cloud-platform-executor
    steps:
      - deploy-to:
          environment: prod
          token: ${CIRCLE_CI_TOKEN_PROD}

# ------------------
# WORKFLOWS
# ------------------
workflows:
  version: 2

  build-deploy-master:
    jobs:
      - build_and_scan:
          filters:
            branches:
              only:
                - main

      - build_scan_and_push_image:
          requires:
            - build_and_scan

      - deploy-dev:
          requires:
            - build_scan_and_push_image

      - hold_install_on_test:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-test:
          requires:
            - hold_install_on_test

      - hold_install_on_uat:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-uat:
          requires:
            - hold_install_on_uat

      - hold_install_on_staging:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-staging:
          requires:
            - hold_install_on_staging

      - hold_install_on_prod:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-prod:
          requires:
            - hold_install_on_prod

  build-deploy-branch:
    jobs:
      - build_and_scan:
          filters:
            branches:
              ignore:
                - main

      - build_scan_and_push_image:
          requires:
            - build_and_scan

      - hold_install_on_dev:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-dev:
          requires:
            - hold_install_on_dev

      - hold_install_on_test:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-test:
          requires:
            - hold_install_on_test

      - hold_install_on_uat:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-uat:
          requires:
            - hold_install_on_uat

      - hold_install_on_staging:
          type: approval
          requires:
            - build_scan_and_push_image

      - deploy-staging:
          requires:
            - hold_install_on_staging
